/*
 * -------------------------------------------------
 *  Nextflow config file for running tests
 * -------------------------------------------------
 * Defines bundled input files and everything required
 * to run a fast and simple test. Use as follows:
 *   nextflow run nf-core/methylseq -profile test
 */

params {
  project_name            = 'test_run'
  outDir                  = "/cbio/users/mamana/${project_name}" // outDir: where to put all pipeline's outputs
  workDir                 = "/cbio/users/mamana/work" // wordDir: Nextflow working directory
  scratch                 = "/cbio/"
  help                    = false
  max_memory = 2.GB
  max_cpus = 2
  max_time = 48.h

  // Reference panels
  ref_panels = [
    ["testRefPanel", "/cbio/dbs/refpanels/1000G/VCF/1000GP_Phase3/ALL.chr%s.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz"]
  ]
  // datasets extracted already, all chromosomes in one [name, vcf_file]
  target_datasets = [ 
    ['threesamples', "/cbio/dbs/refpanels/test_data/threesamples.unphased.22.vcf.gz"]  
  ]

  // Genetic map for eagle2
  eagle_genetic_map = "/cbio/dbs/refpanels/eagle/tables/genetic_map_hg19_withX.txt.gz"

  // Use ALL or '' to use all available chromosome in the target dataset
  chromosomes = [22]

  // Phasing method: shapeit (default) or eagle2
  phasing_method          = "eagle"
 
  // Minimac4 option
  minRatio = '0.1'

}


timeline {
  enabled = true
  file = "${params.outDir}/nextflow_reports/${params.project_name}_h3achipimputation_timeline.html"
}
report {
  enabled = true
  file = "${params.outDir}/nextflow_reports/${params.project_name}_h3achipimputation_report.html"
}
trace {
  enabled = true
  file = "${params.outDir}/nextflow_reports/${params.project_name}_h3achipimputation_trace.txt"
}
dag {
  enabled = true
  file = "${params.outDir}/nextflow_reports/${params.project_name}_h3achipimputation_dag.png"
}

process {
  // Process-specific resource requirements
  withLabel: 'medium' {
    errorStrategy  = { if (task.exitStatus in [143, 137, 255]) { 'retry' } else { 'terminate' } }
      memory = 10.GB
  }
  withLabel : 'bigmem' {
    errorStrategy  = { if (task.exitStatus in [143, 137, 255]) { 'retry' } else { 'terminate' } }
    memory = 50.GB
  }
}

profiles{
  singularity {
    singularity.runOptions = " -B ${params.scratch} " // add any paths that need   to be mounted here
  }
  slurm {
    queueSize = 10
  }
  test {
    queueSize = 10
  }
}